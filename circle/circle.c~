#include <stdio.h>

#include <libplayerc/playerc.h>

#define SERVER "localhost" //"gort"
#define PORT	12121 //9876
#define PI	3.14159265

int main(int argc, const char **argv)
{
	double x, speed, ratio;
	int finished, halfway;
	playerc_client_t *client;
	playerc_position2d_t *position2d;
	
	// Create a client object and connect to the server; the server must
	// be running on "localhost" at port 6665
	client = playerc_client_create(NULL, SERVER, PORT);
	if (playerc_client_connect(client) != 0)
	{
		fprintf(stderr, "error: %s\n", playerc_error_str());
		return -1;
	}
	
	// Create a position2d proxy (device id "position2d:0") and susbscribe
	// in read/write mode
	position2d = playerc_position2d_create(client, 0);
	if (playerc_position2d_subscribe(position2d, PLAYERC_OPEN_MODE) != 0)
	{
		fprintf(stderr, "error: %s\n", playerc_error_str());
		return -1;
	}
	
	// Enable the robots motors
	playerc_position2d_enable(position2d, 1);
	
	// Start the robot moving
	x = 0;
	speed = 1;
	ratio = 2;
	playerc_position2d_set_cmd_vel(position2d, speed, 0, (speed / ratio), 1);
	finished = halfway = 0;
	while( !finished ) {
		// Read data from the server and display current robot position
		playerc_client_read(client);
		printf("position : %f %f %f  speed: %f\n", position2d->px, position2d->py, position2d->pa, speed);
		x = position2d->px;
		if(!halfway) {
			if(x < 0) {
				halfway = 1;
			}
		} else {
			if(position2d->pa > -(PI / 2)) {
				if(x > -0.001 && x < 0.001) {
					finished = 1;
					speed = 0;
					//stop the robot
					playerc_position2d_set_cmd_vel(position2d, 0, 0, 0, 1);
				} else {
					if(x > 0) { //back up
						if(speed > .001) {
							speed /= 2;
						}
						playerc_position2d_set_cmd_vel(position2d, -speed, 0, -(speed / ratio), 1);
					} else if(x > -0.4) {
						if(speed > .01) {
							speed /= 2;
						}
						playerc_position2d_set_cmd_vel(position2d, speed, 0, (speed / ratio), 1);
					}
				}
			}
		}
	}
	
	playerc_client_read(client);
	printf("FINAL position : %f %f %f\n", position2d->px, position2d->py, position2d->pa);
	
	
	// Shutdown and tidy up
	playerc_position2d_unsubscribe(position2d);
	playerc_position2d_destroy(position2d);
	playerc_client_disconnect(client);
	playerc_client_destroy(client);
	
	return 0;
}

